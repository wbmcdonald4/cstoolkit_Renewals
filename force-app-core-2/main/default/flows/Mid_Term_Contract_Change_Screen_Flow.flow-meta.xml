<?xml version="1.0" encoding="UTF-8" ?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>navigateToChurn</name>
        <label>Navigate To Churn</label>
        <locationX>578</locationX>
        <locationY>998</locationY>
        <actionName>c:NavigateToRecord</actionName>
        <actionType>component</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>recordId</name>
            <value>
                <elementReference
        >getRenewalOpportunityByRenewedBy.Id</elementReference>
            </value>
        </inputParameters>
        <nameSegment>c:NavigateToRecord</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>navigateToDownsell</name>
        <label>Navigate To Downsell</label>
        <locationX>314</locationX>
        <locationY>998</locationY>
        <actionName>c:NavigateToRecord</actionName>
        <actionType>component</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>recordId</name>
            <value>
                <elementReference
        >getRenewalOpportunityByRenewedBy.Id</elementReference>
            </value>
        </inputParameters>
        <nameSegment>c:NavigateToRecord</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>navigateToUpsellRecord</name>
        <label>Navigate To Upsell Record</label>
        <locationX>50</locationX>
        <locationY>998</locationY>
        <actionName>c:NavigateToRecord</actionName>
        <actionType>component</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>recordId</name>
            <value>
                <elementReference>createUpsellRecord</elementReference>
            </value>
        </inputParameters>
        <nameSegment>c:NavigateToRecord</nameSegment>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <apiVersion>62.0</apiVersion>
    <choices>
        <name>churn</name>
        <choiceText>Churn</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>churn</stringValue>
        </value>
    </choices>
    <choices>
        <name>downsell</name>
        <choiceText>Downsell</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>downsell</stringValue>
        </value>
    </choices>
    <choices>
        <name>upsell</name>
        <choiceText>Upsell</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>upsell</stringValue>
        </value>
    </choices>
    <decisions>
        <name>actionTypeSelected</name>
        <label>Action Type Selected?</label>
        <locationX>314</locationX>
        <locationY>566</locationY>
        <defaultConnector>
            <targetReference>churnScreen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Churn Selected</defaultConnectorLabel>
        <rules>
            <name>upsellSelected</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>actionTypePicklist</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>upsell</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>upsellScreen</targetReference>
            </connector>
            <label>Upsell Selected</label>
        </rules>
        <rules>
            <name>downsellSelected</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>actionTypePicklist</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>downsell</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>downsellScreen</targetReference>
            </connector>
            <label>Downsell Selected</label>
        </rules>
    </decisions>
    <decisions>
        <name>isContractActive</name>
        <label>Is Contract Active?</label>
        <locationX>578</locationX>
        <locationY>350</locationY>
        <defaultConnector>
            <targetReference>Contract_Not_Active_Error</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Contract Not Active</defaultConnectorLabel>
        <rules>
            <name>contractActive</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference
        >getBaseOpportunityById.Contract_Status__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Active</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>actionTypeInput</targetReference>
            </connector>
            <label>Contract Active</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <name>baseOpportunityRemainingTerm</name>
        <dataType>Number</dataType>
        <expression>IF(
TODAY() &gt; {!getBaseOpportunityById.Contract_End_Date__c},
0, 
    FLOOR(
        (YEAR({!getBaseOpportunityById.Contract_End_Date__c}) - YEAR(TODAY())) * 12 + (MONTH({!getBaseOpportunityById.Contract_End_Date__c}) - MONTH(TODAY())) 
    )
)</expression>
        <scale>0</scale>
    </formulas>
    <formulas>
        <name>churnBaseOpportunityAmount</name>
        <dataType>Currency</dataType>
        <expression
    >({!getBaseOpportunityById.ARR__c}/12)*{!churnBaseOpportunityTerm}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>churnBaseOpportunityTerm</name>
        <dataType>Number</dataType>
        <expression>{!getBaseOpportunityById.Contract_Term__c} - (
(YEAR({!getBaseOpportunityById.Contract_End_Date__c}) 
 - YEAR({!churnEffectiveDate})) 
* 12
+ (
    MONTH({!getBaseOpportunityById.Contract_End_Date__c}) 
    - MONTH({!churnEffectiveDate})
  )
+ IF(
    AND(
      DAY({!getBaseOpportunityById.Contract_End_Date__c})
      =
      IF(
        MONTH({!getBaseOpportunityById.Contract_End_Date__c}) = 12,
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1,
            1
          )
          - 1
        ),
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}),
            MONTH({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1
          )
          - 1
        )
      ),

      DAY({!churnEffectiveDate}) = 1
    ),
    1,
    0
  )

)</expression>
        <scale>0</scale>
    </formulas>
    <formulas>
        <name>churnEffectiveDate</name>
        <dataType>Date</dataType>
        <expression>DATE(
    /* 1) Target Year */
    YEAR({!churnDate})
    + IF(
        AND(
            DAY({!churnDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
            MONTH({!churnDate}) = 12
        ),
        1,
        0
    ),

    /* 2) Target Month */
    IF(
        DAY({!churnDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        /* If we need to “bump” the month, handle December carefully */
        IF(
            MONTH({!churnDate}) = 12,
            1,
            MONTH({!churnDate}) + 1
        ),
        /* Otherwise, same month */
        MONTH({!churnDate})
    ),

    /* 3) Target Day, capped by the last day of that year/month */
    MIN(
        DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        DAY(
            DATE(
                /* Same year logic as above */
                YEAR({!churnDate})
                + IF(
                    AND(
                        DAY({!churnDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                        MONTH({!churnDate}) = 12
                    ),
                    1,
                    0
                ),

                /* Month + 1, so that subtracting 1 day yields the last day of our target month */
                IF(
                    DAY({!churnDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                    IF(
                        MONTH({!churnDate}) = 12,
                        1,
                        MONTH({!churnDate}) + 1
                    ),
                    MONTH({!churnDate})
                ) + 1,

                1
            ) 
            - 1 /* Subtract 1 day -&gt; last day of “target month” */
        )
    )
)</expression>
    </formulas>
    <formulas>
        <name>downsellARR</name>
        <dataType>Currency</dataType>
        <expression
    >({!downsellTotalRemainingContractValue}/{!downsellTermLength})*12</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>downsellARRDifference</name>
        <dataType>Currency</dataType>
        <expression
    >({!downsellTotalRemainingContractValue}/{!downsellTermLength})*12</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>downsellBaseOpportunityAmount</name>
        <dataType>Currency</dataType>
        <expression
    >({!getBaseOpportunityById.ARR__c}/12) * {!downsellBaseOpportunityTerm}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>downsellBaseOpportunityTerm</name>
        <dataType>Number</dataType>
        <expression
    >{!getBaseOpportunityById.Contract_Term__c} - {!downsellTermLength}</expression>
        <scale>0</scale>
    </formulas>
    <formulas>
        <name>downsellEffectiveDate</name>
        <dataType>Date</dataType>
        <expression>DATE(
    /* 1) Target Year */
    YEAR({!downsellDate})
    + IF(
        AND(
            DAY({!downsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
            MONTH({!downsellDate}) = 12
        ),
        1,
        0
    ),

    /* 2) Target Month */
    IF(
        DAY({!downsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        /* If we need to “bump” the month, handle December carefully */
        IF(
            MONTH({!downsellDate}) = 12,
            1,
            MONTH({!downsellDate}) + 1
        ),
        /* Otherwise, same month */
        MONTH({!downsellDate})
    ),

    /* 3) Target Day, capped by the last day of that year/month */
    MIN(
        DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        DAY(
            DATE(
                /* Same year logic as above */
                YEAR({!downsellDate})
                + IF(
                    AND(
                        DAY({!downsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                        MONTH({!downsellDate}) = 12
                    ),
                    1,
                    0
                ),

                /* Month + 1, so that subtracting 1 day yields the last day of our target month */
                IF(
                    DAY({!downsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                    IF(
                        MONTH({!downsellDate}) = 12,
                        1,
                        MONTH({!downsellDate}) + 1
                    ),
                    MONTH({!downsellDate})
                ) + 1,

                1
            ) 
            - 1 /* Subtract 1 day -&gt; last day of “target month” */
        )
    )
)</expression>
    </formulas>
    <formulas>
        <name>downsellMRR</name>
        <dataType>Currency</dataType>
        <expression
    >{!downsellTotalRemainingContractValue}/{!downsellTermLength}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>downsellMRRDifference</name>
        <dataType>Currency</dataType>
        <expression
    >{!getBaseOpportunityById.MRR__c} - {!downsellMRR}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>downsellTermLength</name>
        <dataType>Number</dataType>
        <expression>(YEAR({!getBaseOpportunityById.Contract_End_Date__c}) 
 - YEAR({!downsellEffectiveDate})) 
* 12
+ (
    MONTH({!getBaseOpportunityById.Contract_End_Date__c}) 
    - MONTH({!downsellEffectiveDate})
  )
+ IF(
    AND(
      DAY({!getBaseOpportunityById.Contract_End_Date__c})
      =
      IF(
        MONTH({!getBaseOpportunityById.Contract_End_Date__c}) = 12,
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1,
            1
          )
          - 1
        ),
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}),
            MONTH({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1
          )
          - 1
        )
      ),

      DAY({!downsellEffectiveDate}) = 1
    ),
    1,
    0
  )</expression>
        <scale>0</scale>
    </formulas>
    <formulas>
        <name>upsellARR</name>
        <dataType>Currency</dataType>
        <expression
    >({!upsellTotalAdditionalContractValue}/{!upsellTermLength})*12</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <description
    >This formula calculates the &quot;Upsell Effective Date&quot; by aligning it to the day of the original contract start date, setting it to the next month if the upsell date falls after the contract start day, and handling year rollover if in December.</description>
        <name>upsellEffectiveDate</name>
        <dataType>Date</dataType>
        <expression>DATE(
    /* 1) Target Year */
    YEAR({!upsellDate})
    + IF(
        AND(
            DAY({!upsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
            MONTH({!upsellDate}) = 12
        ),
        1,
        0
    ),

    /* 2) Target Month */
    IF(
        DAY({!upsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        /* If we need to “bump” the month, handle December carefully */
        IF(
            MONTH({!upsellDate}) = 12,
            1,
            MONTH({!upsellDate}) + 1
        ),
        /* Otherwise, same month */
        MONTH({!upsellDate})
    ),

    /* 3) Target Day, capped by the last day of that year/month */
    MIN(
        DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
        DAY(
            DATE(
                /* Same year logic as above */
                YEAR({!upsellDate})
                + IF(
                    AND(
                        DAY({!upsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                        MONTH({!upsellDate}) = 12
                    ),
                    1,
                    0
                ),

                /* Month + 1, so that subtracting 1 day yields the last day of our target month */
                IF(
                    DAY({!upsellDate}) &gt; DAY({!getBaseOpportunityById.Contract_Start_Date__c}),
                    IF(
                        MONTH({!upsellDate}) = 12,
                        1,
                        MONTH({!upsellDate}) + 1
                    ),
                    MONTH({!upsellDate})
                ) + 1,

                1
            ) 
            - 1 /* Subtract 1 day -&gt; last day of “target month” */
        )
    )
)</expression>
    </formulas>
    <formulas>
        <name>upsellMRR</name>
        <dataType>Currency</dataType>
        <expression
    >{!upsellTotalAdditionalContractValue}/{!upsellTermLength}</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>upsellName</name>
        <dataType>String</dataType>
        <expression
    >{!getBaseOpportunityById.Account.Name} + &quot; - Upsell&quot;</expression>
    </formulas>
    <formulas>
        <name>upsellTermLength</name>
        <dataType>Number</dataType>
        <expression>(YEAR({!getBaseOpportunityById.Contract_End_Date__c}) 
 - YEAR({!upsellEffectiveDate})) 
* 12
+ (
    MONTH({!getBaseOpportunityById.Contract_End_Date__c}) 
    - MONTH({!upsellEffectiveDate})
  )
+ IF(
    AND(
      DAY({!getBaseOpportunityById.Contract_End_Date__c})
      =
      IF(
        MONTH({!getBaseOpportunityById.Contract_End_Date__c}) = 12,
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1,
            1
          )
          - 1
        ),
        DAY(
          DATE(
            YEAR({!getBaseOpportunityById.Contract_End_Date__c}),
            MONTH({!getBaseOpportunityById.Contract_End_Date__c}) + 1,
            1
          )
          - 1
        )
      ),

      DAY({!upsellEffectiveDate}) = 1
    ),
    1,
    0
  )</expression>
        <scale>0</scale>
    </formulas>
    <interviewLabel
  >Mid Term Contract Change Screen Flow {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Mid Term Contract Change Screen Flow</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordCreates>
        <name>createUpsellRecord</name>
        <label>Create Upsell Record</label>
        <locationX>50</locationX>
        <locationY>890</locationY>
        <connector>
            <targetReference>navigateToUpsellRecord</targetReference>
        </connector>
        <inputAssignments>
            <field>AccountId</field>
            <value>
                <elementReference
        >getBaseOpportunityById.AccountId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Amendment_Of__c</field>
            <value>
                <elementReference>getBaseOpportunityById.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Amount</field>
            <value>
                <elementReference
        >upsellTotalAdditionalContractValue</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>CloseDate</field>
            <value>
                <elementReference>upsellEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Start_Date__c</field>
            <value>
                <elementReference>upsellEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Term__c</field>
            <value>
                <elementReference>upsellTermLength</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Name</field>
            <value>
                <elementReference>upsellName</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RecordTypeId</field>
            <value>
                <elementReference>getRecordTypeId.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>StageName</field>
            <value>
                <stringValue>Value Proposition</stringValue>
            </value>
        </inputAssignments>
        <object>Opportunity</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordLookups>
        <name>getBaseOpportunityById</name>
        <label>Get Base Opportunity By Id</label>
        <locationX>578</locationX>
        <locationY>134</locationY>
        <assignNullValuesIfNoRecordsFound
    >false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>getRenewalOpportunityByRenewedBy</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Opportunity</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getRecordTypeId</name>
        <label>getRecordTypeId</label>
        <locationX>50</locationX>
        <locationY>782</locationY>
        <assignNullValuesIfNoRecordsFound
    >false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>createUpsellRecord</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>SobjectType</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Opportunity</stringValue>
            </value>
        </filters>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Upsell</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>RecordType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getRenewalOpportunityByRenewedBy</name>
        <label>Get Renewal Opportunity By Renewed By</label>
        <locationX>578</locationX>
        <locationY>242</locationY>
        <assignNullValuesIfNoRecordsFound
    >false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>isContractActive</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference
        >getBaseOpportunityById.Renewed_By__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Opportunity</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>updateBaseOppChurn</name>
        <label>Update Base Opp Churn</label>
        <locationX>578</locationX>
        <locationY>782</locationY>
        <connector>
            <targetReference>updateRenewalChurn</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>getBaseOpportunityById.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Amount</field>
            <value>
                <elementReference>churnBaseOpportunityAmount</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Term__c</field>
            <value>
                <elementReference>churnBaseOpportunityTerm</elementReference>
            </value>
        </inputAssignments>
        <object>Opportunity</object>
    </recordUpdates>
    <recordUpdates>
        <name>updateBaseOppDownsell</name>
        <label>Update Base Opp Downsell</label>
        <locationX>314</locationX>
        <locationY>782</locationY>
        <connector>
            <targetReference>updateRenewalOppDownsell</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>getBaseOpportunityById.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Amount</field>
            <value>
                <elementReference
        >downsellBaseOpportunityAmount</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Term__c</field>
            <value>
                <elementReference>downsellBaseOpportunityTerm</elementReference>
            </value>
        </inputAssignments>
        <object>Opportunity</object>
    </recordUpdates>
    <recordUpdates>
        <name>updateRenewalChurn</name>
        <label>Update Renewal Opp Churn</label>
        <locationX>578</locationX>
        <locationY>890</locationY>
        <connector>
            <targetReference>navigateToChurn</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference
        >getRenewalOpportunityByRenewedBy.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Amount</field>
            <value>
                <elementReference
        >getBaseOpportunityById.ARR__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>CloseDate</field>
            <value>
                <elementReference>churnEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Start_Date__c</field>
            <value>
                <elementReference>churnEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Term__c</field>
            <value>
                <numberValue>12.0</numberValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>StageName</field>
            <value>
                <stringValue>Closed Lost</stringValue>
            </value>
        </inputAssignments>
        <object>Opportunity</object>
    </recordUpdates>
    <recordUpdates>
        <name>updateRenewalOppDownsell</name>
        <label>Update Renewal Opp Downsell</label>
        <locationX>314</locationX>
        <locationY>890</locationY>
        <connector>
            <targetReference>navigateToDownsell</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference
        >getRenewalOpportunityByRenewedBy.Id</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Amount</field>
            <value>
                <elementReference
        >downsellTotalRemainingContractValue</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>CloseDate</field>
            <value>
                <elementReference>downsellEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Start_Date__c</field>
            <value>
                <elementReference>downsellEffectiveDate</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Contract_Term__c</field>
            <value>
                <elementReference>downsellTermLength</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>StageName</field>
            <value>
                <stringValue>Closed Won</stringValue>
            </value>
        </inputAssignments>
        <object>Opportunity</object>
    </recordUpdates>
    <screens>
        <name>actionTypeInput</name>
        <label>Action Type Input</label>
        <locationX>314</locationX>
        <locationY>458</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>actionTypeSelected</targetReference>
        </connector>
        <fields>
            <name>actionTypeInputDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Current Contract Status:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Start_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;End Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_End_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Time Remaining in Contract: &lt;/strong&gt;{!baseOpportunityRemainingTerm}&lt;strong&gt; &lt;/strong&gt;months&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;What action type is right for you?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Upsell&lt;/strong&gt; – Amend the contract to include additional products or services.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Downsell&lt;/strong&gt; – Apply a discount to the current subscription before the contract end date.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Churn&lt;/strong&gt; – Cancel the current contract before its end date.&lt;/li&gt;&lt;/ul&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>actionTypePicklist</name>
            <choiceReferences>upsell</choiceReferences>
            <choiceReferences>downsell</choiceReferences>
            <choiceReferences>churn</choiceReferences>
            <dataType>String</dataType>
            <fieldText>Select an action type:</fieldText>
            <fieldType>DropdownBox</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>churnScreen</name>
        <label>Churn Screen</label>
        <locationX>578</locationX>
        <locationY>674</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>updateBaseOppChurn</targetReference>
        </connector>
        <fields>
            <name>churnDateDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Current Contract Details:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Start_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;End Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_End_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Contract Term:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Term__c} months&lt;/li&gt;&lt;li&gt;&lt;strong&gt;MRR:&lt;/strong&gt; ${!getBaseOpportunityById.MRR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ARR:&lt;/strong&gt; ${!getBaseOpportunityById.ARR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Contract Value:&lt;/strong&gt; ${!getBaseOpportunityById.Amount}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Please provide the following details for the requested &lt;strong&gt;Churn&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Churn Date:&lt;/strong&gt; Please enter the date the vendor will no longer user our service.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>churnDate</name>
            <dataType>Date</dataType>
            <fieldText>Churn Date</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
        </fields>
        <fields>
            <name>churnPreviewDisplayText</name>
            <fieldText
      >&lt;p&gt;The following changes will be made to the current contract:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Churn Date:&lt;/strong&gt; {!churnDate}&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effective Churn Date:&lt;/strong&gt; {!churnEffectiveDate}&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Months Realized Pre-Termination: &lt;/strong&gt;{!churnBaseOpportunityTerm}&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Adjusted Contract Amount:&lt;/strong&gt; {!churnBaseOpportunityAmount}&lt;/p&gt;&lt;p&gt;If this is correct, please proceed.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>Contract_Not_Active_Error</name>
        <label>Contract Not Active Error</label>
        <locationX>842</locationX>
        <locationY>458</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <fields>
            <name>ContractNotActiveErrorDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;span style=&quot;font-family: &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;; font-size: 1em;&quot;&gt;⚠️&lt;/span&gt; &lt;strong&gt;Action Required: Active Contract Needed &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This process can only be triggered from an &lt;strong&gt;active contract Opportunity&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Please check the contract status of the current Opportunity to ensure it represents an active contract.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;You can also go to the &lt;strong&gt;Account&lt;/strong&gt; associated with this Opportunity and look for active contracts there.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>downsellScreen</name>
        <label>Downsell Screen</label>
        <locationX>314</locationX>
        <locationY>674</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>updateBaseOppDownsell</targetReference>
        </connector>
        <fields>
            <name>downsellDateDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Current Contract Details:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Start_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;End Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_End_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Contract Term:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Term__c} months&lt;/li&gt;&lt;li&gt;&lt;strong&gt;MRR:&lt;/strong&gt; ${!getBaseOpportunityById.MRR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ARR:&lt;/strong&gt; ${!getBaseOpportunityById.ARR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Contract Value:&lt;/strong&gt; ${!getBaseOpportunityById.Amount}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Please provide the following details for the requested &lt;strong&gt;Downsell&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Downsell Date:&lt;/strong&gt; The date when the downsell was agreed upon.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Remaining Contract Value:&lt;/strong&gt; The total amount the client will pay for the remainder of this contract.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>downsellDate</name>
            <dataType>Date</dataType>
            <fieldText>Downsell Date</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
        </fields>
        <fields>
            <name>downsellTotalRemainingContractValue</name>
            <dataType>Currency</dataType>
            <fieldText>Enter Total Remaining Contract Value</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <scale>2</scale>
        </fields>
        <fields>
            <name>downsellPreviewDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Downsell Preview:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Downsell Date:&lt;/strong&gt; {!downsellDate}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Downsell Effective Date:&lt;/strong&gt; {!downsellEffectiveDate}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Downsell Term:&lt;/strong&gt; {!downsellTermLength} months&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Downsell MRR:&lt;/strong&gt; {!downsellMRR} (&lt;strong&gt;{!downsellMRRDifference}/month&lt;/strong&gt; discount will be applied)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Downsell ARR:&lt;/strong&gt; {!downsellARR} (&lt;strong&gt;{!downsellARRDifference}/year&lt;/strong&gt; discount will be applied)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Additional Contract Value:&lt;/strong&gt; {!downsellTotalRemainingContractValue}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If this is correct, please proceed.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>upsellScreen</name>
        <label>Upsell Screen</label>
        <locationX>50</locationX>
        <locationY>674</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>getRecordTypeId</targetReference>
        </connector>
        <fields>
            <name>upsellDateDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Current Contract Details:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Start_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;End Date:&lt;/strong&gt; {!getBaseOpportunityById.Contract_End_Date__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Contract Term:&lt;/strong&gt; {!getBaseOpportunityById.Contract_Term__c} months&lt;/li&gt;&lt;li&gt;&lt;strong&gt;MRR:&lt;/strong&gt; ${!getBaseOpportunityById.MRR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ARR:&lt;/strong&gt; ${!getBaseOpportunityById.ARR__c}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Contract Value:&lt;/strong&gt; ${!getBaseOpportunityById.Amount}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Please provide the following details for the requested &lt;strong&gt;Upsell&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Upsell Date:&lt;/strong&gt; The date when the upsell was agreed upon.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Additional Contract Value:&lt;/strong&gt; The total additional amount being added to the contract for the remaining months.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>upsellDate</name>
            <dataType>Date</dataType>
            <fieldText>Upsell Date</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
        </fields>
        <fields>
            <name>upsellTotalAdditionalContractValue</name>
            <dataType>Currency</dataType>
            <fieldText>Total Additional Contract Value</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn
      >UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <scale>0</scale>
        </fields>
        <fields>
            <name>upsellAmendmentPreviewDisplayText</name>
            <fieldText
      >&lt;p&gt;&lt;strong&gt;Upsell Amendment Preview:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Upsell Date:&lt;/strong&gt; {!upsellDate}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Upsell Effective Date:&lt;/strong&gt; {!upsellEffectiveDate}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Upsell Term (months):&lt;/strong&gt; {!upsellTermLength}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Upsell MRR:&lt;/strong&gt; {!upsellMRR}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Upsell ARR:&lt;/strong&gt; {!upsellARR}&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Total Additional Contract Value:&lt;/strong&gt; {!upsellTotalAdditionalContractValue}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If this is correct, please proceed.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <start>
        <locationX>452</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>getBaseOpportunityById</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
